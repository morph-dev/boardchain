// Generated by @wagmi/cli@1.3.0 on 8/15/2023 at 3:13:47 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  Address,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi';
import { ReadContractResult, WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions';

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TicTacToe
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const ticTacToeABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'lobby_', internalType: 'address', type: 'address' }],
  },
  { type: 'error', inputs: [], name: 'ErrorInvalidMove' },
  { type: 'error', inputs: [], name: 'ErrorNotCurrentPlayer' },
  { type: 'error', inputs: [], name: 'ErrorNotLobby' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'gameId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'result', internalType: 'enum GameResult', type: 'uint8', indexed: false },
    ],
    name: 'GameFinished',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'gameId', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'GameStarted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'gameId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'playerIsX', internalType: 'bool', type: 'bool', indexed: false },
      { name: 'x', internalType: 'uint8', type: 'uint8', indexed: false },
      { name: 'y', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Move',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'board',
    outputs: [{ name: '', internalType: 'enum BoardState[3][3]', type: 'uint8[3][3]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'gameId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'gameSummary',
    outputs: [
      {
        name: '',
        internalType: 'struct GameSummary',
        type: 'tuple',
        components: [
          { name: 'gameId', internalType: 'uint256', type: 'uint256' },
          { name: 'playerX', internalType: 'address', type: 'address' },
          { name: 'playerO', internalType: 'address', type: 'address' },
          { name: 'phase', internalType: 'enum GamePhase', type: 'uint8' },
          { name: 'result', internalType: 'enum GameResult', type: 'uint8' },
          { name: 'numberOfMoves', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lobby',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'numberOfGames',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'x', internalType: 'uint8', type: 'uint8' },
      { name: 'y', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'playMove',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'playerX', internalType: 'address', type: 'address' },
      { name: 'playerO', internalType: 'address', type: 'address' },
    ],
    name: 'startGame',
    outputs: [],
  },
] as const;

/**
 *
 */
export const ticTacToeAddress = {
  31337: '0xa16E02E87b7454126E5E10d957A927A7F5B5d2be',
} as const;

/**
 *
 */
export const ticTacToeConfig = { address: ticTacToeAddress, abi: ticTacToeABI } as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TicTacToeEngine
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ticTacToeEngineABI = [
  { type: 'error', inputs: [], name: 'ErrorInvalidMove' },
  { type: 'error', inputs: [], name: 'InvalidPlayers' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'gameId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'result', internalType: 'enum GameResult', type: 'uint8', indexed: false },
    ],
    name: 'GameFinished',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'gameId', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'GameStarted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'gameId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'playerIsX', internalType: 'bool', type: 'bool', indexed: false },
      { name: 'x', internalType: 'uint8', type: 'uint8', indexed: false },
      { name: 'y', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Move',
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TicTacToeLobby
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const ticTacToeLobbyABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  { type: 'error', inputs: [], name: 'ErrorGameNotFound' },
  { type: 'error', inputs: [], name: 'ErrorNotMaker' },
  { type: 'error', inputs: [], name: 'ErrorNotTaker' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'gameId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'maker', internalType: 'address', type: 'address', indexed: false },
      { name: 'taker', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'ChallengeCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'gameId', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'ChallengeRejected',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'gameId', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'ChallengeRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'gameId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'maker', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'OpenGameCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'gameId', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'OpenGameRevoked',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'gameId', internalType: 'uint256', type: 'uint256' }],
    name: 'acceptChallenge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'gameId', internalType: 'uint256', type: 'uint256' }],
    name: 'acceptGame',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'allOpenGames',
    outputs: [
      {
        name: '',
        internalType: 'struct OpenGame[]',
        type: 'tuple[]',
        components: [
          { name: 'gameId', internalType: 'uint256', type: 'uint256' },
          { name: 'maker', internalType: 'address', type: 'address' },
          { name: 'makerIsX', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'taker', internalType: 'address', type: 'address' }],
    name: 'allPendingChallenges',
    outputs: [
      {
        name: '',
        internalType: 'struct ChallengeGame[]',
        type: 'tuple[]',
        components: [
          { name: 'gameId', internalType: 'uint256', type: 'uint256' },
          { name: 'maker', internalType: 'address', type: 'address' },
          { name: 'taker', internalType: 'address', type: 'address' },
          { name: 'makerIsX', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'challengeGames',
    outputs: [
      { name: 'gameId', internalType: 'uint256', type: 'uint256' },
      { name: 'maker', internalType: 'address', type: 'address' },
      { name: 'taker', internalType: 'address', type: 'address' },
      { name: 'makerIsX', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'numberOfOpenGames',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'taker', internalType: 'address', type: 'address' }],
    name: 'numberOfPendingChallenges',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'openGames',
    outputs: [
      { name: 'gameId', internalType: 'uint256', type: 'uint256' },
      { name: 'maker', internalType: 'address', type: 'address' },
      { name: 'makerIsX', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'pendingChallenges',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'playAsX', internalType: 'bool', type: 'bool' },
      { name: 'taker', internalType: 'address', type: 'address' },
    ],
    name: 'proposeChallenge',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'playAsX', internalType: 'bool', type: 'bool' }],
    name: 'proposeGame',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'gameId', internalType: 'uint256', type: 'uint256' }],
    name: 'rejectChallenge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'gameId', internalType: 'uint256', type: 'uint256' }],
    name: 'revokeChallenge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'gameId', internalType: 'uint256', type: 'uint256' }],
    name: 'revokeGame',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ticTacToe',
    outputs: [{ name: '', internalType: 'contract TicTacToe', type: 'address' }],
  },
] as const;

/**
 *
 */
export const ticTacToeLobbyAddress = {
  31337: '0x5FbDB2315678afecb367f032d93F642f64180aa3',
} as const;

/**
 *
 */
export const ticTacToeLobbyConfig = {
  address: ticTacToeLobbyAddress,
  abi: ticTacToeLobbyABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GoEngine
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const goEngineABI = [
  {
    type: 'error',
    inputs: [
      { name: 'x', internalType: 'uint8', type: 'uint8' },
      { name: 'y', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'ErrorGroupNotFound',
  },
  {
    type: 'error',
    inputs: [{ name: 'boardSize', internalType: 'uint256', type: 'uint256' }],
    name: 'ErrorInvalidBoardSize',
  },
  {
    type: 'error',
    inputs: [
      { name: 'boardSize', internalType: 'uint8', type: 'uint8' },
      { name: 'handicap', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'ErrorInvalidHandicap',
  },
  {
    type: 'error',
    inputs: [
      { name: 'x', internalType: 'uint8', type: 'uint8' },
      { name: 'y', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'ErrorKo',
  },
  {
    type: 'error',
    inputs: [
      { name: 'x', internalType: 'uint8', type: 'uint8' },
      { name: 'y', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'ErrorNoSelfCapture',
  },
  {
    type: 'error',
    inputs: [
      { name: 'x', internalType: 'uint8', type: 'uint8' },
      { name: 'y', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'ErrorSpotOccupied',
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GoGame
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const goGameABI = [
  {
    type: 'error',
    inputs: [
      { name: 'x', internalType: 'uint8', type: 'uint8' },
      { name: 'y', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'ErrorGroupNotFound',
  },
  {
    type: 'error',
    inputs: [{ name: 'boardSize', internalType: 'uint256', type: 'uint256' }],
    name: 'ErrorInvalidBoardSize',
  },
  {
    type: 'error',
    inputs: [
      { name: 'boardSize', internalType: 'uint8', type: 'uint8' },
      { name: 'handicap', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'ErrorInvalidHandicap',
  },
  {
    type: 'error',
    inputs: [
      { name: 'x', internalType: 'uint8', type: 'uint8' },
      { name: 'y', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'ErrorKo',
  },
  {
    type: 'error',
    inputs: [
      { name: 'x', internalType: 'uint8', type: 'uint8' },
      { name: 'y', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'ErrorNoSelfCapture',
  },
  { type: 'error', inputs: [], name: 'ErrorNotActive' },
  { type: 'error', inputs: [], name: 'ErrorNotCurrentPlayer' },
  { type: 'error', inputs: [], name: 'ErrorNotPlayer' },
  {
    type: 'error',
    inputs: [
      { name: 'x', internalType: 'uint8', type: 'uint8' },
      { name: 'y', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'ErrorSpotOccupied',
  },
  {
    type: 'error',
    inputs: [
      { name: 'gamePhase', internalType: 'enum GamePhase', type: 'uint8' },
      { name: 'expectedPhase', internalType: 'enum GamePhase', type: 'uint8' },
    ],
    name: 'ErrorWrongPhase',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'gameId', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'result',
        internalType: 'struct GameResult',
        type: 'tuple',
        components: [
          { name: 'result', internalType: 'enum Result', type: 'uint8' },
          { name: 'reason', internalType: 'string', type: 'string' },
        ],
        indexed: false,
      },
    ],
    name: 'GameFinished',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'gameId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'previous', internalType: 'enum GamePhase', type: 'uint8', indexed: false },
      { name: 'current', internalType: 'enum GamePhase', type: 'uint8', indexed: false },
    ],
    name: 'GamePhaseChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'gameId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'black', internalType: 'address', type: 'address', indexed: false },
      { name: 'white', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'GameStarted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'gameId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'player', internalType: 'address', type: 'address', indexed: false },
      { name: 'x', internalType: 'uint8', type: 'uint8', indexed: false },
      { name: 'y', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'MarkedAliveGroup',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'gameId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'player', internalType: 'address', type: 'address', indexed: false },
      { name: 'x', internalType: 'uint8', type: 'uint8', indexed: false },
      { name: 'y', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'MarkedDeadGroup',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'gameId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'player', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'Pass',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'gameId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'player', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'ScoringAccepted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'gameId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'player', internalType: 'address', type: 'address', indexed: false },
      { name: 'x', internalType: 'uint8', type: 'uint8', indexed: false },
      { name: 'y', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'StonePlayed',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'gameId', internalType: 'uint256', type: 'uint256' }],
    name: 'acceptScoring',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'player', internalType: 'address', type: 'address' }],
    name: 'allPlayerGames',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'gameId', internalType: 'uint256', type: 'uint256' }],
    name: 'getGameState',
    outputs: [
      {
        name: '',
        internalType: 'struct GameFullState',
        type: 'tuple',
        components: [
          {
            name: 'info',
            internalType: 'struct GameInfo',
            type: 'tuple',
            components: [
              { name: 'gameId', internalType: 'uint256', type: 'uint256' },
              { name: 'boardSize', internalType: 'uint8', type: 'uint8' },
              { name: 'komi', internalType: 'int16', type: 'int16' },
              { name: 'handicap', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'players', internalType: 'address[2]', type: 'address[2]' },
          { name: 'phase', internalType: 'enum GamePhase', type: 'uint8' },
          {
            name: 'result',
            internalType: 'struct GameResult',
            type: 'tuple',
            components: [
              { name: 'result', internalType: 'enum Result', type: 'uint8' },
              { name: 'reason', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'playingState',
            internalType: 'struct PlayingState',
            type: 'tuple',
            components: [
              { name: 'numberOfMoves', internalType: 'uint256', type: 'uint256' },
              {
                name: 'lastMove',
                internalType: 'struct Move',
                type: 'tuple',
                components: [
                  { name: 'x', internalType: 'uint8', type: 'uint8' },
                  { name: 'y', internalType: 'uint8', type: 'uint8' },
                  { name: 'isPass', internalType: 'bool', type: 'bool' },
                ],
              },
              { name: 'currentPlayer', internalType: 'enum Player', type: 'uint8' },
              { name: 'isKoPossible', internalType: 'bool', type: 'bool' },
              { name: 'prisoners', internalType: 'uint16[2]', type: 'uint16[2]' },
            ],
          },
          {
            name: 'scoringState',
            internalType: 'struct ScoringState',
            type: 'tuple',
            components: [
              { name: 'accepted', internalType: 'bool[2]', type: 'bool[2]' },
              { name: 'boardPrisoners', internalType: 'uint16[2]', type: 'uint16[2]' },
              { name: 'territory', internalType: 'uint16[2]', type: 'uint16[2]' },
              { name: 'board', internalType: 'enum ScoringBoardState[][]', type: 'uint8[][]' },
            ],
          },
          { name: 'board', internalType: 'enum BoardState[][]', type: 'uint8[][]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'gameId', internalType: 'uint256', type: 'uint256' },
      { name: 'x', internalType: 'uint8', type: 'uint8' },
      { name: 'y', internalType: 'uint8', type: 'uint8' },
      { name: 'dead', internalType: 'bool', type: 'bool' },
    ],
    name: 'markGroup',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'gameId', internalType: 'uint256', type: 'uint256' }],
    name: 'pass',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'gameId', internalType: 'uint256', type: 'uint256' },
      { name: 'x', internalType: 'uint8', type: 'uint8' },
      { name: 'y', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'playStone',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'playerGames',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'gameId', internalType: 'uint256', type: 'uint256' }],
    name: 'resign',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'black', internalType: 'address', type: 'address' },
      { name: 'white', internalType: 'address', type: 'address' },
      { name: 'boardSize', internalType: 'uint8', type: 'uint8' },
      { name: 'komi', internalType: 'int16', type: 'int16' },
      { name: 'handicap', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'startGame',
    outputs: [{ name: 'gameId', internalType: 'uint256', type: 'uint256' }],
  },
] as const;

/**
 *
 */
export const goGameAddress = {
  31337: '0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512',
} as const;

/**
 *
 */
export const goGameConfig = { address: goGameAddress, abi: goGameABI } as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ticTacToeABI}__.
 *
 *
 */
export function useTicTacToeRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ticTacToeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ticTacToeABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof ticTacToeAddress } = {} as any
) {
  return useContractRead({
    abi: ticTacToeABI,
    address: ticTacToeAddress[31337],
    ...config,
  } as UseContractReadConfig<typeof ticTacToeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ticTacToeABI}__ and `functionName` set to `"board"`.
 *
 *
 */
export function useTicTacToeBoard<
  TFunctionName extends 'board',
  TSelectData = ReadContractResult<typeof ticTacToeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ticTacToeABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ticTacToeAddress } = {} as any
) {
  return useContractRead({
    abi: ticTacToeABI,
    address: ticTacToeAddress[31337],
    functionName: 'board',
    ...config,
  } as UseContractReadConfig<typeof ticTacToeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ticTacToeABI}__ and `functionName` set to `"gameId"`.
 *
 *
 */
export function useTicTacToeGameId<
  TFunctionName extends 'gameId',
  TSelectData = ReadContractResult<typeof ticTacToeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ticTacToeABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ticTacToeAddress } = {} as any
) {
  return useContractRead({
    abi: ticTacToeABI,
    address: ticTacToeAddress[31337],
    functionName: 'gameId',
    ...config,
  } as UseContractReadConfig<typeof ticTacToeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ticTacToeABI}__ and `functionName` set to `"gameSummary"`.
 *
 *
 */
export function useTicTacToeGameSummary<
  TFunctionName extends 'gameSummary',
  TSelectData = ReadContractResult<typeof ticTacToeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ticTacToeABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ticTacToeAddress } = {} as any
) {
  return useContractRead({
    abi: ticTacToeABI,
    address: ticTacToeAddress[31337],
    functionName: 'gameSummary',
    ...config,
  } as UseContractReadConfig<typeof ticTacToeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ticTacToeABI}__ and `functionName` set to `"lobby"`.
 *
 *
 */
export function useTicTacToeLobby<
  TFunctionName extends 'lobby',
  TSelectData = ReadContractResult<typeof ticTacToeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ticTacToeABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ticTacToeAddress } = {} as any
) {
  return useContractRead({
    abi: ticTacToeABI,
    address: ticTacToeAddress[31337],
    functionName: 'lobby',
    ...config,
  } as UseContractReadConfig<typeof ticTacToeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ticTacToeABI}__ and `functionName` set to `"numberOfGames"`.
 *
 *
 */
export function useTicTacToeNumberOfGames<
  TFunctionName extends 'numberOfGames',
  TSelectData = ReadContractResult<typeof ticTacToeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ticTacToeABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ticTacToeAddress } = {} as any
) {
  return useContractRead({
    abi: ticTacToeABI,
    address: ticTacToeAddress[31337],
    functionName: 'numberOfGames',
    ...config,
  } as UseContractReadConfig<typeof ticTacToeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ticTacToeABI}__.
 *
 *
 */
export function useTicTacToeWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ticTacToeAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ticTacToeABI, string>['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof ticTacToeABI, TFunctionName, TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
      } = {} as any
) {
  return useContractWrite<typeof ticTacToeABI, TFunctionName, TMode>({
    abi: ticTacToeABI,
    address: ticTacToeAddress[31337],
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ticTacToeABI}__ and `functionName` set to `"playMove"`.
 *
 *
 */
export function useTicTacToePlayMove<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ticTacToeAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ticTacToeABI, 'playMove'>['request']['abi'],
        'playMove',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'playMove' }
    : UseContractWriteConfig<typeof ticTacToeABI, 'playMove', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'playMove';
      } = {} as any
) {
  return useContractWrite<typeof ticTacToeABI, 'playMove', TMode>({
    abi: ticTacToeABI,
    address: ticTacToeAddress[31337],
    functionName: 'playMove',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ticTacToeABI}__ and `functionName` set to `"startGame"`.
 *
 *
 */
export function useTicTacToeStartGame<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ticTacToeAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ticTacToeABI, 'startGame'>['request']['abi'],
        'startGame',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'startGame' }
    : UseContractWriteConfig<typeof ticTacToeABI, 'startGame', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'startGame';
      } = {} as any
) {
  return useContractWrite<typeof ticTacToeABI, 'startGame', TMode>({
    abi: ticTacToeABI,
    address: ticTacToeAddress[31337],
    functionName: 'startGame',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ticTacToeABI}__.
 *
 *
 */
export function usePrepareTicTacToeWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ticTacToeABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof ticTacToeAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: ticTacToeABI,
    address: ticTacToeAddress[31337],
    ...config,
  } as UsePrepareContractWriteConfig<typeof ticTacToeABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ticTacToeABI}__ and `functionName` set to `"playMove"`.
 *
 *
 */
export function usePrepareTicTacToePlayMove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ticTacToeABI, 'playMove'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ticTacToeAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: ticTacToeABI,
    address: ticTacToeAddress[31337],
    functionName: 'playMove',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ticTacToeABI, 'playMove'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ticTacToeABI}__ and `functionName` set to `"startGame"`.
 *
 *
 */
export function usePrepareTicTacToeStartGame(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ticTacToeABI, 'startGame'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ticTacToeAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: ticTacToeABI,
    address: ticTacToeAddress[31337],
    functionName: 'startGame',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ticTacToeABI, 'startGame'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ticTacToeABI}__.
 *
 *
 */
export function useTicTacToeEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ticTacToeABI, TEventName>, 'abi' | 'address'> & {
    chainId?: keyof typeof ticTacToeAddress;
  } = {} as any
) {
  return useContractEvent({
    abi: ticTacToeABI,
    address: ticTacToeAddress[31337],
    ...config,
  } as UseContractEventConfig<typeof ticTacToeABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ticTacToeABI}__ and `eventName` set to `"GameFinished"`.
 *
 *
 */
export function useTicTacToeGameFinishedEvent(
  config: Omit<
    UseContractEventConfig<typeof ticTacToeABI, 'GameFinished'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof ticTacToeAddress } = {} as any
) {
  return useContractEvent({
    abi: ticTacToeABI,
    address: ticTacToeAddress[31337],
    eventName: 'GameFinished',
    ...config,
  } as UseContractEventConfig<typeof ticTacToeABI, 'GameFinished'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ticTacToeABI}__ and `eventName` set to `"GameStarted"`.
 *
 *
 */
export function useTicTacToeGameStartedEvent(
  config: Omit<
    UseContractEventConfig<typeof ticTacToeABI, 'GameStarted'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof ticTacToeAddress } = {} as any
) {
  return useContractEvent({
    abi: ticTacToeABI,
    address: ticTacToeAddress[31337],
    eventName: 'GameStarted',
    ...config,
  } as UseContractEventConfig<typeof ticTacToeABI, 'GameStarted'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ticTacToeABI}__ and `eventName` set to `"Move"`.
 *
 *
 */
export function useTicTacToeMoveEvent(
  config: Omit<
    UseContractEventConfig<typeof ticTacToeABI, 'Move'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof ticTacToeAddress } = {} as any
) {
  return useContractEvent({
    abi: ticTacToeABI,
    address: ticTacToeAddress[31337],
    eventName: 'Move',
    ...config,
  } as UseContractEventConfig<typeof ticTacToeABI, 'Move'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ticTacToeEngineABI}__.
 */
export function useTicTacToeEngineEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ticTacToeEngineABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ticTacToeEngineABI, ...config } as UseContractEventConfig<
    typeof ticTacToeEngineABI,
    TEventName
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ticTacToeEngineABI}__ and `eventName` set to `"GameFinished"`.
 */
export function useTicTacToeEngineGameFinishedEvent(
  config: Omit<
    UseContractEventConfig<typeof ticTacToeEngineABI, 'GameFinished'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ticTacToeEngineABI,
    eventName: 'GameFinished',
    ...config,
  } as UseContractEventConfig<typeof ticTacToeEngineABI, 'GameFinished'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ticTacToeEngineABI}__ and `eventName` set to `"GameStarted"`.
 */
export function useTicTacToeEngineGameStartedEvent(
  config: Omit<
    UseContractEventConfig<typeof ticTacToeEngineABI, 'GameStarted'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ticTacToeEngineABI,
    eventName: 'GameStarted',
    ...config,
  } as UseContractEventConfig<typeof ticTacToeEngineABI, 'GameStarted'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ticTacToeEngineABI}__ and `eventName` set to `"Move"`.
 */
export function useTicTacToeEngineMoveEvent(
  config: Omit<
    UseContractEventConfig<typeof ticTacToeEngineABI, 'Move'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ticTacToeEngineABI,
    eventName: 'Move',
    ...config,
  } as UseContractEventConfig<typeof ticTacToeEngineABI, 'Move'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ticTacToeLobbyABI}__.
 *
 *
 */
export function useTicTacToeLobbyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ticTacToeLobbyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ticTacToeLobbyABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof ticTacToeLobbyAddress } = {} as any
) {
  return useContractRead({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    ...config,
  } as UseContractReadConfig<typeof ticTacToeLobbyABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ticTacToeLobbyABI}__ and `functionName` set to `"allOpenGames"`.
 *
 *
 */
export function useTicTacToeLobbyAllOpenGames<
  TFunctionName extends 'allOpenGames',
  TSelectData = ReadContractResult<typeof ticTacToeLobbyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ticTacToeLobbyABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ticTacToeLobbyAddress } = {} as any
) {
  return useContractRead({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    functionName: 'allOpenGames',
    ...config,
  } as UseContractReadConfig<typeof ticTacToeLobbyABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ticTacToeLobbyABI}__ and `functionName` set to `"allPendingChallenges"`.
 *
 *
 */
export function useTicTacToeLobbyAllPendingChallenges<
  TFunctionName extends 'allPendingChallenges',
  TSelectData = ReadContractResult<typeof ticTacToeLobbyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ticTacToeLobbyABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ticTacToeLobbyAddress } = {} as any
) {
  return useContractRead({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    functionName: 'allPendingChallenges',
    ...config,
  } as UseContractReadConfig<typeof ticTacToeLobbyABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ticTacToeLobbyABI}__ and `functionName` set to `"challengeGames"`.
 *
 *
 */
export function useTicTacToeLobbyChallengeGames<
  TFunctionName extends 'challengeGames',
  TSelectData = ReadContractResult<typeof ticTacToeLobbyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ticTacToeLobbyABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ticTacToeLobbyAddress } = {} as any
) {
  return useContractRead({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    functionName: 'challengeGames',
    ...config,
  } as UseContractReadConfig<typeof ticTacToeLobbyABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ticTacToeLobbyABI}__ and `functionName` set to `"numberOfOpenGames"`.
 *
 *
 */
export function useTicTacToeLobbyNumberOfOpenGames<
  TFunctionName extends 'numberOfOpenGames',
  TSelectData = ReadContractResult<typeof ticTacToeLobbyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ticTacToeLobbyABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ticTacToeLobbyAddress } = {} as any
) {
  return useContractRead({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    functionName: 'numberOfOpenGames',
    ...config,
  } as UseContractReadConfig<typeof ticTacToeLobbyABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ticTacToeLobbyABI}__ and `functionName` set to `"numberOfPendingChallenges"`.
 *
 *
 */
export function useTicTacToeLobbyNumberOfPendingChallenges<
  TFunctionName extends 'numberOfPendingChallenges',
  TSelectData = ReadContractResult<typeof ticTacToeLobbyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ticTacToeLobbyABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ticTacToeLobbyAddress } = {} as any
) {
  return useContractRead({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    functionName: 'numberOfPendingChallenges',
    ...config,
  } as UseContractReadConfig<typeof ticTacToeLobbyABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ticTacToeLobbyABI}__ and `functionName` set to `"openGames"`.
 *
 *
 */
export function useTicTacToeLobbyOpenGames<
  TFunctionName extends 'openGames',
  TSelectData = ReadContractResult<typeof ticTacToeLobbyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ticTacToeLobbyABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ticTacToeLobbyAddress } = {} as any
) {
  return useContractRead({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    functionName: 'openGames',
    ...config,
  } as UseContractReadConfig<typeof ticTacToeLobbyABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ticTacToeLobbyABI}__ and `functionName` set to `"pendingChallenges"`.
 *
 *
 */
export function useTicTacToeLobbyPendingChallenges<
  TFunctionName extends 'pendingChallenges',
  TSelectData = ReadContractResult<typeof ticTacToeLobbyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ticTacToeLobbyABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ticTacToeLobbyAddress } = {} as any
) {
  return useContractRead({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    functionName: 'pendingChallenges',
    ...config,
  } as UseContractReadConfig<typeof ticTacToeLobbyABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ticTacToeLobbyABI}__ and `functionName` set to `"ticTacToe"`.
 *
 *
 */
export function useTicTacToeLobbyTicTacToe<
  TFunctionName extends 'ticTacToe',
  TSelectData = ReadContractResult<typeof ticTacToeLobbyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ticTacToeLobbyABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ticTacToeLobbyAddress } = {} as any
) {
  return useContractRead({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    functionName: 'ticTacToe',
    ...config,
  } as UseContractReadConfig<typeof ticTacToeLobbyABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ticTacToeLobbyABI}__.
 *
 *
 */
export function useTicTacToeLobbyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ticTacToeLobbyAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ticTacToeLobbyABI, string>['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof ticTacToeLobbyABI, TFunctionName, TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
      } = {} as any
) {
  return useContractWrite<typeof ticTacToeLobbyABI, TFunctionName, TMode>({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ticTacToeLobbyABI}__ and `functionName` set to `"acceptChallenge"`.
 *
 *
 */
export function useTicTacToeLobbyAcceptChallenge<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ticTacToeLobbyAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ticTacToeLobbyABI, 'acceptChallenge'>['request']['abi'],
        'acceptChallenge',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'acceptChallenge' }
    : UseContractWriteConfig<typeof ticTacToeLobbyABI, 'acceptChallenge', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'acceptChallenge';
      } = {} as any
) {
  return useContractWrite<typeof ticTacToeLobbyABI, 'acceptChallenge', TMode>({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    functionName: 'acceptChallenge',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ticTacToeLobbyABI}__ and `functionName` set to `"acceptGame"`.
 *
 *
 */
export function useTicTacToeLobbyAcceptGame<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ticTacToeLobbyAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ticTacToeLobbyABI, 'acceptGame'>['request']['abi'],
        'acceptGame',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'acceptGame' }
    : UseContractWriteConfig<typeof ticTacToeLobbyABI, 'acceptGame', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'acceptGame';
      } = {} as any
) {
  return useContractWrite<typeof ticTacToeLobbyABI, 'acceptGame', TMode>({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    functionName: 'acceptGame',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ticTacToeLobbyABI}__ and `functionName` set to `"proposeChallenge"`.
 *
 *
 */
export function useTicTacToeLobbyProposeChallenge<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ticTacToeLobbyAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ticTacToeLobbyABI, 'proposeChallenge'>['request']['abi'],
        'proposeChallenge',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'proposeChallenge' }
    : UseContractWriteConfig<typeof ticTacToeLobbyABI, 'proposeChallenge', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'proposeChallenge';
      } = {} as any
) {
  return useContractWrite<typeof ticTacToeLobbyABI, 'proposeChallenge', TMode>({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    functionName: 'proposeChallenge',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ticTacToeLobbyABI}__ and `functionName` set to `"proposeGame"`.
 *
 *
 */
export function useTicTacToeLobbyProposeGame<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ticTacToeLobbyAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ticTacToeLobbyABI, 'proposeGame'>['request']['abi'],
        'proposeGame',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'proposeGame' }
    : UseContractWriteConfig<typeof ticTacToeLobbyABI, 'proposeGame', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'proposeGame';
      } = {} as any
) {
  return useContractWrite<typeof ticTacToeLobbyABI, 'proposeGame', TMode>({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    functionName: 'proposeGame',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ticTacToeLobbyABI}__ and `functionName` set to `"rejectChallenge"`.
 *
 *
 */
export function useTicTacToeLobbyRejectChallenge<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ticTacToeLobbyAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ticTacToeLobbyABI, 'rejectChallenge'>['request']['abi'],
        'rejectChallenge',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'rejectChallenge' }
    : UseContractWriteConfig<typeof ticTacToeLobbyABI, 'rejectChallenge', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'rejectChallenge';
      } = {} as any
) {
  return useContractWrite<typeof ticTacToeLobbyABI, 'rejectChallenge', TMode>({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    functionName: 'rejectChallenge',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ticTacToeLobbyABI}__ and `functionName` set to `"revokeChallenge"`.
 *
 *
 */
export function useTicTacToeLobbyRevokeChallenge<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ticTacToeLobbyAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ticTacToeLobbyABI, 'revokeChallenge'>['request']['abi'],
        'revokeChallenge',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'revokeChallenge' }
    : UseContractWriteConfig<typeof ticTacToeLobbyABI, 'revokeChallenge', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'revokeChallenge';
      } = {} as any
) {
  return useContractWrite<typeof ticTacToeLobbyABI, 'revokeChallenge', TMode>({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    functionName: 'revokeChallenge',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ticTacToeLobbyABI}__ and `functionName` set to `"revokeGame"`.
 *
 *
 */
export function useTicTacToeLobbyRevokeGame<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ticTacToeLobbyAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ticTacToeLobbyABI, 'revokeGame'>['request']['abi'],
        'revokeGame',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'revokeGame' }
    : UseContractWriteConfig<typeof ticTacToeLobbyABI, 'revokeGame', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'revokeGame';
      } = {} as any
) {
  return useContractWrite<typeof ticTacToeLobbyABI, 'revokeGame', TMode>({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    functionName: 'revokeGame',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ticTacToeLobbyABI}__.
 *
 *
 */
export function usePrepareTicTacToeLobbyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ticTacToeLobbyABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof ticTacToeLobbyAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    ...config,
  } as UsePrepareContractWriteConfig<typeof ticTacToeLobbyABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ticTacToeLobbyABI}__ and `functionName` set to `"acceptChallenge"`.
 *
 *
 */
export function usePrepareTicTacToeLobbyAcceptChallenge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ticTacToeLobbyABI, 'acceptChallenge'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ticTacToeLobbyAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    functionName: 'acceptChallenge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ticTacToeLobbyABI, 'acceptChallenge'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ticTacToeLobbyABI}__ and `functionName` set to `"acceptGame"`.
 *
 *
 */
export function usePrepareTicTacToeLobbyAcceptGame(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ticTacToeLobbyABI, 'acceptGame'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ticTacToeLobbyAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    functionName: 'acceptGame',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ticTacToeLobbyABI, 'acceptGame'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ticTacToeLobbyABI}__ and `functionName` set to `"proposeChallenge"`.
 *
 *
 */
export function usePrepareTicTacToeLobbyProposeChallenge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ticTacToeLobbyABI, 'proposeChallenge'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ticTacToeLobbyAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    functionName: 'proposeChallenge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ticTacToeLobbyABI, 'proposeChallenge'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ticTacToeLobbyABI}__ and `functionName` set to `"proposeGame"`.
 *
 *
 */
export function usePrepareTicTacToeLobbyProposeGame(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ticTacToeLobbyABI, 'proposeGame'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ticTacToeLobbyAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    functionName: 'proposeGame',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ticTacToeLobbyABI, 'proposeGame'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ticTacToeLobbyABI}__ and `functionName` set to `"rejectChallenge"`.
 *
 *
 */
export function usePrepareTicTacToeLobbyRejectChallenge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ticTacToeLobbyABI, 'rejectChallenge'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ticTacToeLobbyAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    functionName: 'rejectChallenge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ticTacToeLobbyABI, 'rejectChallenge'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ticTacToeLobbyABI}__ and `functionName` set to `"revokeChallenge"`.
 *
 *
 */
export function usePrepareTicTacToeLobbyRevokeChallenge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ticTacToeLobbyABI, 'revokeChallenge'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ticTacToeLobbyAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    functionName: 'revokeChallenge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ticTacToeLobbyABI, 'revokeChallenge'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ticTacToeLobbyABI}__ and `functionName` set to `"revokeGame"`.
 *
 *
 */
export function usePrepareTicTacToeLobbyRevokeGame(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ticTacToeLobbyABI, 'revokeGame'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ticTacToeLobbyAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    functionName: 'revokeGame',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ticTacToeLobbyABI, 'revokeGame'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ticTacToeLobbyABI}__.
 *
 *
 */
export function useTicTacToeLobbyEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ticTacToeLobbyABI, TEventName>, 'abi' | 'address'> & {
    chainId?: keyof typeof ticTacToeLobbyAddress;
  } = {} as any
) {
  return useContractEvent({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    ...config,
  } as UseContractEventConfig<typeof ticTacToeLobbyABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ticTacToeLobbyABI}__ and `eventName` set to `"ChallengeCreated"`.
 *
 *
 */
export function useTicTacToeLobbyChallengeCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof ticTacToeLobbyABI, 'ChallengeCreated'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof ticTacToeLobbyAddress } = {} as any
) {
  return useContractEvent({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    eventName: 'ChallengeCreated',
    ...config,
  } as UseContractEventConfig<typeof ticTacToeLobbyABI, 'ChallengeCreated'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ticTacToeLobbyABI}__ and `eventName` set to `"ChallengeRejected"`.
 *
 *
 */
export function useTicTacToeLobbyChallengeRejectedEvent(
  config: Omit<
    UseContractEventConfig<typeof ticTacToeLobbyABI, 'ChallengeRejected'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof ticTacToeLobbyAddress } = {} as any
) {
  return useContractEvent({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    eventName: 'ChallengeRejected',
    ...config,
  } as UseContractEventConfig<typeof ticTacToeLobbyABI, 'ChallengeRejected'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ticTacToeLobbyABI}__ and `eventName` set to `"ChallengeRevoked"`.
 *
 *
 */
export function useTicTacToeLobbyChallengeRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof ticTacToeLobbyABI, 'ChallengeRevoked'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof ticTacToeLobbyAddress } = {} as any
) {
  return useContractEvent({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    eventName: 'ChallengeRevoked',
    ...config,
  } as UseContractEventConfig<typeof ticTacToeLobbyABI, 'ChallengeRevoked'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ticTacToeLobbyABI}__ and `eventName` set to `"OpenGameCreated"`.
 *
 *
 */
export function useTicTacToeLobbyOpenGameCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof ticTacToeLobbyABI, 'OpenGameCreated'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof ticTacToeLobbyAddress } = {} as any
) {
  return useContractEvent({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    eventName: 'OpenGameCreated',
    ...config,
  } as UseContractEventConfig<typeof ticTacToeLobbyABI, 'OpenGameCreated'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ticTacToeLobbyABI}__ and `eventName` set to `"OpenGameRevoked"`.
 *
 *
 */
export function useTicTacToeLobbyOpenGameRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof ticTacToeLobbyABI, 'OpenGameRevoked'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof ticTacToeLobbyAddress } = {} as any
) {
  return useContractEvent({
    abi: ticTacToeLobbyABI,
    address: ticTacToeLobbyAddress[31337],
    eventName: 'OpenGameRevoked',
    ...config,
  } as UseContractEventConfig<typeof ticTacToeLobbyABI, 'OpenGameRevoked'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goGameABI}__.
 *
 *
 */
export function useGoGameRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof goGameABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof goGameABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof goGameAddress } = {} as any
) {
  return useContractRead({
    abi: goGameABI,
    address: goGameAddress[31337],
    ...config,
  } as UseContractReadConfig<typeof goGameABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goGameABI}__ and `functionName` set to `"allPlayerGames"`.
 *
 *
 */
export function useGoGameAllPlayerGames<
  TFunctionName extends 'allPlayerGames',
  TSelectData = ReadContractResult<typeof goGameABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof goGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof goGameAddress } = {} as any
) {
  return useContractRead({
    abi: goGameABI,
    address: goGameAddress[31337],
    functionName: 'allPlayerGames',
    ...config,
  } as UseContractReadConfig<typeof goGameABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goGameABI}__ and `functionName` set to `"getGameState"`.
 *
 *
 */
export function useGoGameGetGameState<
  TFunctionName extends 'getGameState',
  TSelectData = ReadContractResult<typeof goGameABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof goGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof goGameAddress } = {} as any
) {
  return useContractRead({
    abi: goGameABI,
    address: goGameAddress[31337],
    functionName: 'getGameState',
    ...config,
  } as UseContractReadConfig<typeof goGameABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goGameABI}__ and `functionName` set to `"playerGames"`.
 *
 *
 */
export function useGoGamePlayerGames<
  TFunctionName extends 'playerGames',
  TSelectData = ReadContractResult<typeof goGameABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof goGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof goGameAddress } = {} as any
) {
  return useContractRead({
    abi: goGameABI,
    address: goGameAddress[31337],
    functionName: 'playerGames',
    ...config,
  } as UseContractReadConfig<typeof goGameABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goGameABI}__.
 *
 *
 */
export function useGoGameWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof goGameAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof goGameABI, string>['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof goGameABI, TFunctionName, TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
      } = {} as any
) {
  return useContractWrite<typeof goGameABI, TFunctionName, TMode>({
    abi: goGameABI,
    address: goGameAddress[31337],
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goGameABI}__ and `functionName` set to `"acceptScoring"`.
 *
 *
 */
export function useGoGameAcceptScoring<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof goGameAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof goGameABI, 'acceptScoring'>['request']['abi'],
        'acceptScoring',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'acceptScoring' }
    : UseContractWriteConfig<typeof goGameABI, 'acceptScoring', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'acceptScoring';
      } = {} as any
) {
  return useContractWrite<typeof goGameABI, 'acceptScoring', TMode>({
    abi: goGameABI,
    address: goGameAddress[31337],
    functionName: 'acceptScoring',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goGameABI}__ and `functionName` set to `"markGroup"`.
 *
 *
 */
export function useGoGameMarkGroup<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof goGameAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof goGameABI, 'markGroup'>['request']['abi'],
        'markGroup',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'markGroup' }
    : UseContractWriteConfig<typeof goGameABI, 'markGroup', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'markGroup';
      } = {} as any
) {
  return useContractWrite<typeof goGameABI, 'markGroup', TMode>({
    abi: goGameABI,
    address: goGameAddress[31337],
    functionName: 'markGroup',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goGameABI}__ and `functionName` set to `"pass"`.
 *
 *
 */
export function useGoGamePass<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof goGameAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof goGameABI, 'pass'>['request']['abi'],
        'pass',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'pass' }
    : UseContractWriteConfig<typeof goGameABI, 'pass', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'pass';
      } = {} as any
) {
  return useContractWrite<typeof goGameABI, 'pass', TMode>({
    abi: goGameABI,
    address: goGameAddress[31337],
    functionName: 'pass',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goGameABI}__ and `functionName` set to `"playStone"`.
 *
 *
 */
export function useGoGamePlayStone<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof goGameAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof goGameABI, 'playStone'>['request']['abi'],
        'playStone',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'playStone' }
    : UseContractWriteConfig<typeof goGameABI, 'playStone', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'playStone';
      } = {} as any
) {
  return useContractWrite<typeof goGameABI, 'playStone', TMode>({
    abi: goGameABI,
    address: goGameAddress[31337],
    functionName: 'playStone',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goGameABI}__ and `functionName` set to `"resign"`.
 *
 *
 */
export function useGoGameResign<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof goGameAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof goGameABI, 'resign'>['request']['abi'],
        'resign',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'resign' }
    : UseContractWriteConfig<typeof goGameABI, 'resign', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'resign';
      } = {} as any
) {
  return useContractWrite<typeof goGameABI, 'resign', TMode>({
    abi: goGameABI,
    address: goGameAddress[31337],
    functionName: 'resign',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goGameABI}__ and `functionName` set to `"startGame"`.
 *
 *
 */
export function useGoGameStartGame<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof goGameAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof goGameABI, 'startGame'>['request']['abi'],
        'startGame',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'startGame' }
    : UseContractWriteConfig<typeof goGameABI, 'startGame', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'startGame';
      } = {} as any
) {
  return useContractWrite<typeof goGameABI, 'startGame', TMode>({
    abi: goGameABI,
    address: goGameAddress[31337],
    functionName: 'startGame',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goGameABI}__.
 *
 *
 */
export function usePrepareGoGameWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goGameABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof goGameAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: goGameABI,
    address: goGameAddress[31337],
    ...config,
  } as UsePrepareContractWriteConfig<typeof goGameABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goGameABI}__ and `functionName` set to `"acceptScoring"`.
 *
 *
 */
export function usePrepareGoGameAcceptScoring(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goGameABI, 'acceptScoring'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof goGameAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: goGameABI,
    address: goGameAddress[31337],
    functionName: 'acceptScoring',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goGameABI, 'acceptScoring'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goGameABI}__ and `functionName` set to `"markGroup"`.
 *
 *
 */
export function usePrepareGoGameMarkGroup(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goGameABI, 'markGroup'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof goGameAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: goGameABI,
    address: goGameAddress[31337],
    functionName: 'markGroup',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goGameABI, 'markGroup'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goGameABI}__ and `functionName` set to `"pass"`.
 *
 *
 */
export function usePrepareGoGamePass(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goGameABI, 'pass'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof goGameAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: goGameABI,
    address: goGameAddress[31337],
    functionName: 'pass',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goGameABI, 'pass'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goGameABI}__ and `functionName` set to `"playStone"`.
 *
 *
 */
export function usePrepareGoGamePlayStone(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goGameABI, 'playStone'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof goGameAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: goGameABI,
    address: goGameAddress[31337],
    functionName: 'playStone',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goGameABI, 'playStone'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goGameABI}__ and `functionName` set to `"resign"`.
 *
 *
 */
export function usePrepareGoGameResign(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goGameABI, 'resign'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof goGameAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: goGameABI,
    address: goGameAddress[31337],
    functionName: 'resign',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goGameABI, 'resign'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goGameABI}__ and `functionName` set to `"startGame"`.
 *
 *
 */
export function usePrepareGoGameStartGame(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goGameABI, 'startGame'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof goGameAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: goGameABI,
    address: goGameAddress[31337],
    functionName: 'startGame',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goGameABI, 'startGame'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link goGameABI}__.
 *
 *
 */
export function useGoGameEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof goGameABI, TEventName>, 'abi' | 'address'> & {
    chainId?: keyof typeof goGameAddress;
  } = {} as any
) {
  return useContractEvent({
    abi: goGameABI,
    address: goGameAddress[31337],
    ...config,
  } as UseContractEventConfig<typeof goGameABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link goGameABI}__ and `eventName` set to `"GameFinished"`.
 *
 *
 */
export function useGoGameGameFinishedEvent(
  config: Omit<
    UseContractEventConfig<typeof goGameABI, 'GameFinished'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof goGameAddress } = {} as any
) {
  return useContractEvent({
    abi: goGameABI,
    address: goGameAddress[31337],
    eventName: 'GameFinished',
    ...config,
  } as UseContractEventConfig<typeof goGameABI, 'GameFinished'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link goGameABI}__ and `eventName` set to `"GamePhaseChanged"`.
 *
 *
 */
export function useGoGameGamePhaseChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof goGameABI, 'GamePhaseChanged'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof goGameAddress } = {} as any
) {
  return useContractEvent({
    abi: goGameABI,
    address: goGameAddress[31337],
    eventName: 'GamePhaseChanged',
    ...config,
  } as UseContractEventConfig<typeof goGameABI, 'GamePhaseChanged'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link goGameABI}__ and `eventName` set to `"GameStarted"`.
 *
 *
 */
export function useGoGameGameStartedEvent(
  config: Omit<
    UseContractEventConfig<typeof goGameABI, 'GameStarted'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof goGameAddress } = {} as any
) {
  return useContractEvent({
    abi: goGameABI,
    address: goGameAddress[31337],
    eventName: 'GameStarted',
    ...config,
  } as UseContractEventConfig<typeof goGameABI, 'GameStarted'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link goGameABI}__ and `eventName` set to `"MarkedAliveGroup"`.
 *
 *
 */
export function useGoGameMarkedAliveGroupEvent(
  config: Omit<
    UseContractEventConfig<typeof goGameABI, 'MarkedAliveGroup'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof goGameAddress } = {} as any
) {
  return useContractEvent({
    abi: goGameABI,
    address: goGameAddress[31337],
    eventName: 'MarkedAliveGroup',
    ...config,
  } as UseContractEventConfig<typeof goGameABI, 'MarkedAliveGroup'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link goGameABI}__ and `eventName` set to `"MarkedDeadGroup"`.
 *
 *
 */
export function useGoGameMarkedDeadGroupEvent(
  config: Omit<
    UseContractEventConfig<typeof goGameABI, 'MarkedDeadGroup'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof goGameAddress } = {} as any
) {
  return useContractEvent({
    abi: goGameABI,
    address: goGameAddress[31337],
    eventName: 'MarkedDeadGroup',
    ...config,
  } as UseContractEventConfig<typeof goGameABI, 'MarkedDeadGroup'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link goGameABI}__ and `eventName` set to `"Pass"`.
 *
 *
 */
export function useGoGamePassEvent(
  config: Omit<
    UseContractEventConfig<typeof goGameABI, 'Pass'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof goGameAddress } = {} as any
) {
  return useContractEvent({
    abi: goGameABI,
    address: goGameAddress[31337],
    eventName: 'Pass',
    ...config,
  } as UseContractEventConfig<typeof goGameABI, 'Pass'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link goGameABI}__ and `eventName` set to `"ScoringAccepted"`.
 *
 *
 */
export function useGoGameScoringAcceptedEvent(
  config: Omit<
    UseContractEventConfig<typeof goGameABI, 'ScoringAccepted'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof goGameAddress } = {} as any
) {
  return useContractEvent({
    abi: goGameABI,
    address: goGameAddress[31337],
    eventName: 'ScoringAccepted',
    ...config,
  } as UseContractEventConfig<typeof goGameABI, 'ScoringAccepted'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link goGameABI}__ and `eventName` set to `"StonePlayed"`.
 *
 *
 */
export function useGoGameStonePlayedEvent(
  config: Omit<
    UseContractEventConfig<typeof goGameABI, 'StonePlayed'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof goGameAddress } = {} as any
) {
  return useContractEvent({
    abi: goGameABI,
    address: goGameAddress[31337],
    eventName: 'StonePlayed',
    ...config,
  } as UseContractEventConfig<typeof goGameABI, 'StonePlayed'>);
}
